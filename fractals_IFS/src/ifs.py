import random
import math
from concurrent.futures import ThreadPoolExecutor

mat_by_type = {
    "lisc": [
        [0.0000, 0.2439, 0, 0.3053, 0, 0, 0.25],
        [0.7248, 0.03337, -0.0253, 0.7426, 0.2060, 0.2538, 0.25],
        [0.1583 , -0.1297, 0.3550, 0.3676, 0.1383, 0.175, 0.25],
        [0.3386, 0.3694, 0.2227, -0.0756, 0.0679, 0.0826, 0.25]
    ],
    "paproc":[
        [0.0,0.0,0.0,0.16,0.0,0.0,0.01],
        [0.85,0.04,-0.04,0.85,0.0,1.6,0.85],
        [0.2,-0.26,0.23,0.22,0.0,1.6,0.07],
        [-0.15,0.28,0.26,0.24,0.0,0.44,0.07]
    ],
    "drzewo": [
        [0.0500, 0.0000, 0.0000, 0.4000, -0.0600, -0.4700, 1/7],
        [-0.0500, 0.0000, 0.0000,-0.4000,-0.0600, -0.4700, 1/7],
        [0.0300, -0.1400, 0.0000, 0.2600, -0.1600, -0.0100, 1/7],
        [0.0300, -0.1400, 0.0000, 0.2600, -0.1600, -0.0100, 1/7],
        [0.5600, 0.4400,-0.3700, 0.5100, 0.3000, 0.1500, 1/7],
        [0.1900, 0.0700,-0.1000, 0.1500,-0.2000, 0.2800, 1/7],
        [-0.3300,-0.3400,-0.3300, 0.3400,-0.5400, 0.3900, 1/7]
    ],
    "klon": [
        [0.1400, 0.0100, 0.0000, 0.5100, -0.0800, -1.3100, 0.25],
        [0.4300, 0.5200, -0.4500, 0.5000, 1.4900, -0.7500, 0.25],
        [0.4500, -0.4900, 0.4700, 0.4700, -1.6200, -0.7400, 0.25],
        [0.4900, 0.0000, 0.0000, 0.5100, 0.0200, 1.6200, 0.25]
    ],
    "spirala": [
        [0.787879, -0.424242, 0.242424, 0.859848, 1.758647, 1.408065, 0.90],
        [-0.121212, 0.257576, 0.151515, 0.053030, -6.721654, 1.377236, 0.05],
        [0.181818, -0.136364, 0.090909, 0.181818, 6.086107, 1.568035, 0.05]
    ],
    "drzewoSymetryczne": [
        [0.0100, 0.0000, 0.0000, 0.4500, 0.0000, 0.0000, 0.25],
        [-0.0100, 0.0000, 0.0000, -0.4500, 0.0000, 0.4000, 0.25],
        [0.4200, -0.4200, 0.4200, 0.4200, 0.0000, 0.4000, 0.25],
        [0.4200, 0.4200, -0.4200, 0.4200, 0.0000, 0.4000, 0.25]
    ],
    "sniezynka": [
        [0.38200, 0.00000, 0.00000, 0.38200, 0.30900, 0.57000, 1/6],
        [0.11800, -0.36330, 0.36330, 0.11800, 0.36330, 0.33060, 1/6],
        [0.11800, 0.36330, -0.36330, 0.11800, 0.51870, 0.69400, 1/6],
        [-0.30900, -0.22450, 0.22450, -0.30900, 0.60700, 0.30900, 1/6],
        [-0.30900, 0.22450, -0.22450, -0.30900, 0.70160, 0.53350, 1/6],
        [0.38200, 0.00000, 0.00000, -0.38200, 0.30900, 0.67700, 1/6]
    ],
    "smok": [
        [0.824074, 0.281428, -0.212346, 0.864198, -1.882290, -0.110607, 0.8],
        [0.088272, 0.520988, -0.463889, -0.377778, 0.785360, 8.095795, 0.2]
    ],
    "galazka": [
        [0.0100, -0.4100, 0.3900, 0.0000, -0.2800, -0.1850, 1/3],
        [0.7000, 0.3300, -0.3500, 0.7000, 0.1850, 0.0150, 1/3],
        [0.0000, 0.1750, 0.0130, 0.4600, -0.0950, -0.2850, 1/3]
    ]
}

def ifs_points(iterations, mat):
  m = len(mat)

  probability = [mat[0][6]]

  for n in range(1, m):
    probability.append(probability[n - 1] + mat[n][6])

  points = [(0, 0)]

  for n in range(iterations):
      r = random.uniform(0, 1)
      for i in range(m):
        if r < probability[i]:
          X, Y = points[-1]
          x = mat[i][0]*X + mat[i][1]*Y + mat[i][4]
          x = round(x, 3)
          y = mat[i][2]*X + mat[i][3]*Y + mat[i][5]
          y = round(y, 3)
          break
      points.append((x,y))

  uniq_points = set(points)
  X, Y = zip(*uniq_points)

  return X, Y
